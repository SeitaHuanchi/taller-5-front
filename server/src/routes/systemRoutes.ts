import { Router } from 'express';
import type { Request, Response } from 'express';
import { logger } from '../utils/logger';

const router = Router();

/**
 * GET /health - Health check b√°sico del servidor
 */
router.get('/health', (req: Request, res: Response) => {
  try {
    const healthData = {
      status: 'ok',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      env: process.env.NODE_ENV || 'development',
      pid: process.pid,
      version: process.version,
      platform: process.platform
    };

    logger.trace('üè• Health check solicitado', { 
      ip: req.ip,
      userAgent: req.headers['user-agent'] 
    });

    res.json(healthData);
  } catch (error) {
    logger.error('‚ùå Error en health check', { error });
    res.status(500).json({
      status: 'error',
      timestamp: new Date().toISOString(),
      error: 'Error verificando estado del servidor'
    });
  }
});

/**
 * GET / - Informaci√≥n general del API
 */
router.get('/', (req: Request, res: Response) => {
  try {
    const apiInfo = {
      name: 'Servidor de Sincronizaci√≥n Temporal - Algoritmo de Cristian',
      version: '1.0.0',
      description: 'Implementaci√≥n del algoritmo de sincronizaci√≥n de Cristian con failover autom√°tico',
      author: 'Estudiante de Sistemas Distribuidos',
      
      endpoints: {
        'GET /': 'Informaci√≥n del API',
        'GET /health': 'Health check del servidor',
        'GET /api/time': 'Obtener hora actual del servidor',
        'POST /api/time/sync': 'Sincronizar tiempo usando algoritmo de Cristian',
        'GET /api/time/health': 'Estado detallado del sistema de tiempo',
        'GET /api/time/metrics': 'M√©tricas detalladas del sistema',
        'GET /api/time/logs': 'Logs del sistema',
        'DELETE /api/time/logs': 'Limpiar logs del sistema'
      },
      
      algorithm: {
        name: 'Cristian Clock Synchronization',
        description: 'Algoritmo de sincronizaci√≥n de relojes para sistemas distribuidos',
        precision: 'Usa process.hrtime.bigint() para m√°xima precisi√≥n',
        features: [
          'Compensaci√≥n autom√°tica de latencia de red',
          'C√°lculo de offset temporal',
          'Estimaci√≥n de precisi√≥n',
          'Validaci√≥n de confiabilidad'
        ]
      },
      
      ntpServers: {
        primary: 'ntp.shoa.cl',
        secondary: 'pool.ntp.org',
        timeout: '5000ms',
        failover: 'Autom√°tico'
      },
      
      features: [
        'Sincronizaci√≥n de alta precisi√≥n',
        'Failover autom√°tico entre servidores NTP',
        'Circuit breaker pattern para protecci√≥n',
        'M√©tricas en tiempo real',
        'Sistema de logging completo',
        'Soporte para m√∫ltiples clientes concurrentes',
        'Validaci√≥n exhaustiva de datos',
        'Headers de seguridad'
      ],
      
      technical: {
        runtime: `Node.js ${process.version}`,
        platform: process.platform,
        uptime: `${Math.floor(process.uptime())} segundos`,
        memory: `${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} MB`,
        pid: process.pid
      },
      
      usage: {
        syncExample: {
          method: 'POST',
          url: '/api/time/sync',
          headers: {
            'Content-Type': 'application/json',
            'x-client-id': 'mi-cliente'
          },
          body: {
            clientRequestTime: 'tiempo_en_nanosegundos'
          }
        },
        
        documentation: 'Ver API_DOCUMENTATION.md para m√°s detalles',
        testCommands: 'Ver TESTING_COMMANDS.md para comandos de prueba'
      },
      
      timestamp: new Date().toISOString()
    };

    logger.trace('üìñ Informaci√≥n del API solicitada', { 
      ip: req.ip,
      userAgent: req.headers['user-agent'] 
    });

    res.json(apiInfo);
  } catch (error) {
    logger.error('‚ùå Error mostrando informaci√≥n del API', { error });
    res.status(500).json({
      error: 'Error obteniendo informaci√≥n del API',
      timestamp: new Date().toISOString()
    });
  }
});

export default router;
